#-*- coding: utf8 -*-
import os
import sys
sys.path.append("X:/Project/_952_SA/02_development/KcToolBox/source/python/KcLibs/site-packages")

from puzzle.Piece import Piece
import subprocess
import copy
_PIECE_NAME_ = "RenderCurrentFrames"

class RenderCurrentFrames(Piece):
    def __init__(self, **args):
        super(RenderCurrentFrames, self).__init__(**args)
        self.name = _PIECE_NAME_

    def execute(self):
        header = None
        detail = None
        if not self.filtered:
            self.logger.debug("filtered")
            return True, self.pass_data, header, detail

        cmdline = u'"{render_app}" -r {renderer} -s {current} -e {current} -rd "{output_path}" "{file_path}"'
        cmdlines = []
        #render_app = self.data["render_app"]
        #renderer = self.data["renderer"]
        #output_path = self.data["output_path"]
        #file_path = 
        for frame in self.data["render_frames"]:
            data_ = copy.deepcopy(self.data)
            data_["current"] = frame

            cmdlines.append(cmdline.format(**data_))

        bat_file = self.data["bat_path"]
        bat = open(bat_file, "w")
        bat.write("\n".join(cmdlines))
        bat.close()

        subprocess.Popen(self.data["bat_path"], shell=False)
        return True, self.pass_data, header, detail

if __name__ == "__main__":
    data = {"render_app": r"C:\Program Files\Autodesk\Maya2017\bin\Render.exe", 
            "renderer": "sw", 
            "render_frames": [0, 3, 6], 
            "output_path": r"X:\Project\RD\hattori\data\aaa\xxx", 
            "file_path": r"X:\Project\RD\hattori\data\aaa\bbbb.mb",
            "bat_path": r"X:\Project\RD\hattori\data\test.bat"}
    print 1
    x = RenderCurrentFrames(data=data)
    x.execute()