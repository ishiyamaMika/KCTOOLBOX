from __future__ import print_function
from __future__ import unicode_literals

import os
import sys
import datetime
import traceback
import subprocess

from . import Puzzle
from . import pz_env as pz_env
from . import pz_config as pz_config

try:
    reload
except NameError:
    if hasattr(importlib, "reload"):
        # for py3.4+
        from importlib import reload

class PuzzleBatch(Puzzle):
    def __init__(self, name="puzzle", **kwargs):
        log_directory = os.environ.get("PUZZLE_LOGGER_DIRECTORY", pz_env.get_log_directory())
        self.name = os.environ.get("PUZZLE_LOGGER_NAME", name)
        kwargs["log_directory"] = log_directory
        kwargs["name"] = self.name

        super(PuzzleBatch, self).__init__(name=name, **kwargs)
        self.play_batch()

    def play_batch(self):
        pz_path = os.environ["ALL_TASKS_PATH"]
        keys = os.environ["TASK_KEYS"]
        data_path = os.environ["PUZZLE_DATA_PATH"]
        pipe_path = os.environ.get("PUZZLE_PIPE_PATH", "")
        tasks_directory = os.environ.get("PUZZLE_TASKS", False)
        if tasks_directory:
            if tasks_directory not in sys.path:
                sys.path.append(tasks_directory)

        info, data = pz_config.read(data_path)
        pz_info, pz_data = pz_config.read(pz_path)

        if pipe_path != "":
            pass_info, context_data = pz_config.read(pipe_path)
        else:
            context_data = None
        keys = [l.strip() for l in keys.split(";") if l != ""]
        messages = []
        for key in keys:
            message = self.play(pz_data[key],
                                data,
                                context_data)

            messages.extend(message)

        for message in messages:
            if not message[0]:
                self.close_event(messages)
                break

        return messages

    def close_event(self):
        def _force_close():
            flg = True
            message = "force close"

            try:
                import maya.cmds as cmds
                import maya.mel as mel
                mode = "maya"
            except BaseException:
                mode = "win"
            if mode == "maya":
                try:
                    mel.eval('scriptJob -cf "busy" "quit -f -ec 0";')
                    message = u"file app close: maya"
                    flg = True
                except BaseException:
                    message = u"file app close failed: maya"
                    flg = False

            return flg, message

        message_path = os.environ.get("PUZZLE_MESSAGE_OUTPUT", False)
        if message_path:
            pz_config.save(message_path, self.logger.details.get_all())

        if os.environ.get("PUZZLE_CLOSE_APP", False):
            _force_close()

def execute_command(app, **kwargs):
    def _get_script(script_):
        if script_ is None:
            script_ = os.path.dirname(__file__)
            script_ = "{}/pz_batch.py".format(script_.replace("\\", "/"))
        else:
            script_ = script_.replace("/", "\\")

        return script_

    if "start_signal" in kwargs:
        kwargs["start_signal"].emit()

    script = _get_script(kwargs.get("script", None))
    if app.endswith("mayapy.exe"):
        cmd = r'"{}" "{}"'.format(app.replace("/", "\\"), script.replace("/", "\\"))

    elif app.endswith("mayabatch.exe") or app.endswith("maya.exe"):
        cmd = r'''"{}" -command "python(\\"execfile('{}')\\");"'''.format(app, script)

    elif app.endswith("motionbuilder.exe"):
        cmd = r'"{}" -suspendMessages -g 50 50 "{}"'.format(app.replace("/", "\\"), script.replace("/", "\\"))

    elif app.endswith("3dsmax.exe"):
        cmd = r'"{}" -U PythonHost {}'.format(app.replace("/", "\\"), script.replace("/", "\\"))

    elif app.endswith("3dsmaxpy.exe"):
        cmd = r'"{}" "{}"'.format(app.replace("/", "\\"), script.replace("/", "\\"))

    elif app.endswith("maya.exe"):
        sys_path = kwargs.get("sys_path", False)
        if not sys_path:
            return False
        sys_path = sys_path.replace("\\", "/")
        log_name = kwargs.get("log_name", "puzzle")

        cmd = '"{}" -command '.format(app)
        cmd += '"python(\\\"import sys;import os;sys.path.append(\\\\\\"{}\\\\\\");'.format(sys_path)
        cmd += 'from puzzle.Puzzle import Puzzle;x=Puzzle(\\\\\\"{}\\\\\\", '.format(log_name)
        cmd += 'file_mode=True)\\\");"'
    else:
        print("return: False")
        return False
    if kwargs.get("bat_file", False):
        bat = "SET PUZZLE_FILE_MODE=True\n"
        bat += "SET PUZZLE_DATA_PATH={}\n".format(str(kwargs["data_path"]))
        bat += "SET ALL_TASKS_PATH={}\n".format(str(kwargs["piece_path"]))
        bat += "SET PUZZLE_LOGGER_NAME={}\n".format(str(kwargs["log_name"]))
        bat += "SET PUZZLE_LOGGER_DIRECTORY={}\n".format(str(kwargs.get("log_directory", False)))
        bat += "SET TASK_KEYS={}\n".format(str(kwargs["keys"]))
        bat += "SET PUZZLE_APP={}\n".format(str(app))
        bat += "SET PUZZLE_PATH={}\n".format(str(kwargs["sys_path"]))
        bat += "SET PUZZLE_TASKS={}\n".format(str(kwargs["task_path"]))
        bat += "SET PUZZLE_MESSAGE_OUTPUT={}\n".format(str(kwargs["message_output"]))
        if "pipe_path" in kwargs:
            bat += "SET PUZZLE_PIPE_PATH={}\n".format(str(kwargs["pipe_path"]))

        if "order" in kwargs:
            bat += "SET PUZZLE_ORDER={}\n".format(str(kwargs["order"]))

        if "result" in kwargs:
            bat += "SET PUZZLE_RESULT={}\n".format(str(kwargs["result"]))

        bat += "SET PUZZLE_CLOSE_APP=True\n"
        if "standalone_python" in kwargs:
            bat += "SET PUZZLE_STANDALONE_PYTHON={}\n".format(str(kwargs["standalone_python"]))
        bat += cmd

        if not os.path.exists(os.path.dirname(kwargs["bat_file"])):
            os.makedirs(os.path.dirname(kwargs["bat_file"]))
        tx = open(kwargs["bat_file"], "w")
        tx.write(bat)
        tx.close()

        if kwargs.get("bat_start", False):
            res = subprocess.Popen(kwargs["bat_file"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False).communicate()
            for r in res:
                print(r)

    else:
        env_copy = os.environ.copy()
        env_copy["PUZZLE_FILE_MODE"] = "True"
        env_copy["PUZZLE_DATA_PATH"] = str(kwargs["data_path"])
        env_copy["ALL_TASKS_PATH"] = str(kwargs["piece_path"])
        env_copy["PUZZLE_LOGGER_NAME"] = str(kwargs["log_name"])
        env_copy["PUZZLE_LOGGER_DIRECTORY"] = str(kwargs.get("log_directory", False))
        env_copy["TASK_KEYS"] = str(kwargs["keys"])
        env_copy["PUZZLE_APP"] = str(app)
        env_copy["PUZZLE_PATH"] = str(kwargs["sys_path"])
        env_copy["PUZZLE_TASKS"] = str(kwargs["task_path"])
        env_copy["PUZZLE_MESSAGE_OUTPUT"] = str(kwargs["message_output"])
        if "pipe_path" in kwargs:
            env_copy["PUZZLE_PIPE_PATH"] = str(kwargs["pipe_path"])

        if "order" in kwargs:
            env_copy["PUZZLE_ORDER"] = str(kwargs["order"])

        if "result" in kwargs:
            env_copy["PUZZLE_RESULT"] = str(kwargs["result"])

        env_copy["PUZZLE_CLOSE_APP"] = "True"
        if "standalone_python" in kwargs:
            env_copy["PUZZLE_STANDALONE_PYTHON"] = str(kwargs["standalone_python"])

        res = subprocess.Popen(cmd, env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False).communicate()
        for r in res:
            try:
                print(r)
            except BaseException:
                print("failed")

    if "end_signal" in kwargs:
        kwargs["end_signal"].emit(kwargs)

    return cmd
